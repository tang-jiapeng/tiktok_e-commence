syntax = "proto3";

package api.product;

option go_package = "api/product";

import "api.proto";
import "category_api.proto";
import "brand_api.proto";

message Product {
  int64 id = 1;
  string name = 2;
  string description = 3;
  string picture = 4;
  float price = 5;

  string category_name = 6;
  int64 stock = 7;
  int64 sale = 8;
  uint32 publish_status = 9;
  int64 brand_id = 10;
  int64 category_id = 11;
}

message ProductRequest {
  string productName = 1 [(api.form) = "product_name"];
}

message ProductResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"']; // 0-success, other values-failure
  string status_msg = 2;
  repeated Product products = 3;
}

message ProductInsertRequest {
  string name = 1 [(api.form) = "name"];
  string description = 2 [(api.form) = "description"];
  string picture = 3 [(api.form) = "picture"];
  float price = 4 [(api.form) = "price"];
  int64 stock = 5 [(api.form) = "stock"];
  int64 brand_id = 6 [(api.form) = "brandId"];
  int64 category_id = 7 [(api.form)= "categoryId"];
}

message ProductInsertResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"']; // 0-success, other values-failure
  string status_msg = 2;
}

message ProductSelectRequest {
  int64 id = 1;
}

message ProductSelectResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  Product product = 3;
}

message ProductDeleteRequest {
  int64 id = 1;
}

message ProductDeleteResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
}

message ProductUpdateRequest {
  int64 id = 1[(api.form)= "id"];
  string name = 2[(api.form)= "name"];
  string description = 3[(api.form)= "description"];
  string picture = 4[(api.form)= "picture"];
  float price = 5[(api.form)= "price"];
  repeated string categories = 6[(api.form)= "categories"];
  int64 stock=7[(api.form)= "stock"];
  int64 sale=8[(api.form)= "sale"];
  uint32 publish_status=9[(api.form)= "publish_status"];
  int64 brand_id = 10 [(api.form) = "brandId"];
  int64 category_id = 11 [(api.form)= "categoryId"];
}

message ProductUpdateResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
}

message ProductSelectListRequest {
  repeated int64 id = 1[(api.form)= "ids"];
}
message ProductSelectListResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
  repeated Product products = 3;
}

message ProductLockQuantity {
  int64 id = 1[(api.body)= "id"];
  int64 quantity = 2[(api.body)= "quantity"];
}

message ProductLockQuantityRequest {
  repeated ProductLockQuantity products = 1[(api.body)= "products"];
}

message ProductLockQuantityResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
}

service ProductService {
  rpc Search(ProductRequest) returns (ProductResponse) {
    option (api.post) = "/product/search";
  }

  rpc ProductInsert(ProductInsertRequest) returns (ProductInsertResponse) {
    option (api.post) = "/product/insert";
  }

  rpc ProductSelect(ProductSelectRequest) returns (ProductSelectResponse) {
    option (api.post) = "/product/select";
  }

  rpc ProductDelete(ProductDeleteRequest) returns (ProductDeleteResponse) {
    option (api.post) = "/product/delete";
  }

  rpc ProductUpdate(ProductUpdateRequest) returns (ProductUpdateResponse) {
    option (api.post) = "/product/update";
  }

  rpc ProductLockQuantity(ProductLockQuantityRequest) returns (ProductLockQuantityResponse) {
    option (api.post) = "/product/lockQuantity";
  }

  rpc ProductSelectList(ProductSelectListRequest) returns (ProductSelectListResponse) {
    option (api.post) = "/product/selectList";
  }

  rpc CategorySelect(CategorySelectRequest) returns (CategorySelectResponse) {
    option (api.post) = "/category/select";
  }

  rpc CategoryInsert(CategoryInsertRequest) returns (CategoryInsertResponse) {
    option (api.post) = "/category/insert";
  }

  rpc CategoryDelete(CategoryDeleteRequest) returns (CategoryDeleteResponse) {
    option (api.post) = "/category/delete";
  }

  rpc CategoryUpdate(CategoryUpdateRequest) returns (CategoryUpdateResponse) {
    option (api.post) = "/category/update";
  }

  rpc BrandSelect (BrandSelectRequest) returns (BrandSelectResponse) {
    option (api.post) = "/brand/select";
  }

  rpc BrandInsert (BrandInsertRequest) returns (BrandInsertResponse) {
    option (api.post) = "/brand/insert";
  }

  rpc BrandDelete (BrandDeleteRequest) returns (BrandDeleteResponse) {
    option (api.post) = "/brand/delete";
  }

  rpc BrandUpdate (BrandUpdateRequest) returns (BrandUpdateResponse) {
    option (api.post) = "/brand/update";
  }
}
